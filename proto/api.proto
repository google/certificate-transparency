syntax = "proto3";

/*
Use protoc to generate language specific code gen.

protoc -I/usr/local/include -I. -I$GOPATH/src --go_out=plugins=grpc:. proto/api.proto proto/ct.proto
*/

package ct;

import "proto/ct.proto";

//////////////////////////////////////////////////////////////////////////////////
// JSON structures follow.
// These represent the structures returned by the CT Log server.
//////////////////////////////////////////////////////////////////////////////////

// AddChainRequest represents the JSON request body sent to the add-chain CT
// method.
message AddChainRequest {
   repeated string chain = 1;  
}

// AddChainResponse represents the JSON response to the add-chain CT method.
// An SCT represents a Log's promise to integrate a [pre-]certificate into the
// log within a defined period of time.
message AddChainResponse {
	 Version sct_version = 1; // SCT structure version
	 string id = 2; // Log ID
	 uint64 timestamp = 3; // Timestamp of issuance
	 string extensions = 4; // Holder for any CT extensions
	 string signature = 5; // Log signature for this SCT
}

// GetSTHResponse respresents the JSON response to the get-sth CT method
message GetSTHResponse {
	 uint64 tree_size = 1; // Number of certs in the current tree
	 uint64 timestamp = 2; // Time that the tree was created
	 string sha256_root_hash = 3; // Root hash of the tree
	 string tree_head_signature = 4; // Log signature for this STH
}

// Base64LeafEntry respresents a Base64 encoded leaf entry
message Base64LeafEntry {
	 string leaf_input = 1; 
	 string extra_data = 2;
}

// GetEntriesReponse respresents the JSON response to the CT get-entries method
message GetEntriesResponse  {
	repeated Base64LeafEntry entries = 1; // the list of returned entries
}

// GetConsistencyProofResponse represents the JSON response to the CT get-consistency-proof method
message GetConsistencyProofResponse  {
	repeated string consistency = 1; 
}

// GetAuditProofResponse represents the JSON response to the CT get-audit-proof method
message GetAuditProofResponse {
	repeated string hash = 1; // the hashes which make up the proof
	 uint64 tree_size = 2; // the tree size against which this proof is constructed
}

// GetAcceptedRootsResponse represents the JSON response to the CT get-roots method.
message GetAcceptedRootsResponse {
	repeated string certificates = 1;
}

// GetEntryAndProodReponse represents the JSON response to the CT get-entry-and-proof method
message GetEntryAndProofResponse {
	 string leaf_input = 1; // the entry itself
	 string extra_data = 2; // any chain provided when the entry was added to the log
	repeated string audit_path = 3; // the corresponding proof
}

